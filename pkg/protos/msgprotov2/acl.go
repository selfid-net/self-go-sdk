// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package msgprotov2

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ACL struct {
	_tab flatbuffers.Table
}

func GetRootAsACL(buf []byte, offset flatbuffers.UOffsetT) *ACL {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ACL{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *ACL) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ACL) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ACL) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ACL) Msgtype() MsgType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return MsgType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ACL) MutateMsgtype(n MsgType) bool {
	return rcv._tab.MutateInt8Slot(6, int8(n))
}

func (rcv *ACL) Command() ACLCommand {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return ACLCommand(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ACL) MutateCommand(n ACLCommand) bool {
	return rcv._tab.MutateInt8Slot(8, int8(n))
}

func (rcv *ACL) Payload(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *ACL) PayloadLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ACL) PayloadBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ACL) MutatePayload(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func ACLStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func ACLAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func ACLAddMsgtype(builder *flatbuffers.Builder, msgtype MsgType) {
	builder.PrependInt8Slot(1, int8(msgtype), 0)
}
func ACLAddCommand(builder *flatbuffers.Builder, command ACLCommand) {
	builder.PrependInt8Slot(2, int8(command), 0)
}
func ACLAddPayload(builder *flatbuffers.Builder, payload flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(payload), 0)
}
func ACLStartPayloadVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func ACLEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
