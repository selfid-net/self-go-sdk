// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package msgprotov2

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Auth struct {
	_tab flatbuffers.Table
}

func GetRootAsAuth(buf []byte, offset flatbuffers.UOffsetT) *Auth {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Auth{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Auth) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Auth) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Auth) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Auth) Msgtype() MsgType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return MsgType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Auth) MutateMsgtype(n MsgType) bool {
	return rcv._tab.MutateInt8Slot(6, int8(n))
}

func (rcv *Auth) Token() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Auth) Device() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Auth) Offset() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Auth) MutateOffset(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func AuthStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func AuthAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func AuthAddMsgtype(builder *flatbuffers.Builder, msgtype MsgType) {
	builder.PrependInt8Slot(1, int8(msgtype), 0)
}
func AuthAddToken(builder *flatbuffers.Builder, token flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(token), 0)
}
func AuthAddDevice(builder *flatbuffers.Builder, device flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(device), 0)
}
func AuthAddOffset(builder *flatbuffers.Builder, offset int64) {
	builder.PrependInt64Slot(4, offset, 0)
}
func AuthEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
